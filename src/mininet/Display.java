/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mininet;

import java.awt.Color;
import javax.swing.JLabel;
import java.util.ArrayList;
import javax.swing.JFormattedTextField;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.HashSet;
import javax.swing.*;
import javax.swing.JFrame;
import java.awt.event.*;
import java.awt.Dimension;
import java.awt.*;
import javax.swing.text.*;
import java.text.ParseException;

/**
 *
 * @author vlad7
 */

public class Display extends javax.swing.JFrame {
    
    private ArrayList<JLabel> _inputname;
    private ArrayList<JLabel> _inputunit;
    private ArrayList<JFormattedTextField> _inputtext;
    private JButton _jButtonNewNet;
    private JButton _jButtonNetDown;
    private JButton _jButtonNetSave;
    private JButton _jButtonNetStart;
    private JButton _jButtonNetStudy;
    private NetFacade _netfacade;
    private JScrollPane _scrollpane;
    private JPanel _innerpanel;
    
    /**
     * Creates new form Display
     */
    
    public Display() {
        _netfacade=new NetFacade();

        initComponents();
        myInit();
    }
    
    //пустая панель заглушка
    private class JEmptyPanel extends JPanel{       
        public JEmptyPanel(){
            super();
            this.setPreferredSize(new Dimension(295,30));
        }
        public JEmptyPanel(int width,int height){
            super();
            this.setPreferredSize(new Dimension(width,height));
        }
    }
    
    private class JResultLabel extends JLabel{
        public JResultLabel(String s){
            super();
            setPreferredSize(new Dimension(250,30));
            setText(s);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelName = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabelDN = new javax.swing.JLabel();
        jLabelNetName = new javax.swing.JLabel();
        jLabelDD = new javax.swing.JLabel();
        jLabelNetDesc = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabelName.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabelName.setText("MiniNet");

        jLabelDN.setText("Название сети:");

        jLabelNetName.setText("N/A");

        jLabelDD.setText("Описание:");

        jLabelNetDesc.setText("N/A");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(293, 293, 293)
                                .addComponent(jLabelName))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelDN)
                                    .addComponent(jLabelDD))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelNetName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelNetDesc, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE))))
                        .addGap(196, 196, 196))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addComponent(jSeparator2))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDN)
                    .addComponent(jLabelNetName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDD)
                    .addComponent(jLabelNetDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void myInit(){
        
        //панель скроллинга
        _scrollpane=new JScrollPane();
        _scrollpane.setSize(new Dimension(600,400));
        //кнопки
        this.setSize(650,215+440);
        System.out.println(this.getHeight()+" "+this.getWidth());
        _jButtonNewNet=new JButton();
        JElementConventer.ConvertToMyButton(_jButtonNewNet);
        _jButtonNewNet.setText("Создать");
        _jButtonNetDown=new JButton();
        JElementConventer.ConvertToMyButton(_jButtonNetDown);
        _jButtonNetDown.setText("Загрузить");
        _jButtonNetSave=new JButton();
        JElementConventer.ConvertToMyButton(_jButtonNetSave);
        _jButtonNetSave.setText("Сохранить");
        _jButtonNetStart=new JButton();
        JElementConventer.ConvertToMyButton(_jButtonNetStart);
        _jButtonNetStart.setText("Расчет");
        _jButtonNetStudy=new JButton();
        JElementConventer.ConvertToMyButton(_jButtonNetStudy);
        _jButtonNetStudy.setText("Обучение");
        
        int height=this.getHeight()-75-400;   
        _scrollpane.setLocation(10, height);
        _scrollpane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        height+=410;
        _jButtonNewNet.setLocation(10, height);
        _jButtonNetDown.setLocation(120,height);
        _jButtonNetSave.setLocation(230, height);
        _jButtonNetStart.setLocation(340,height);
        _jButtonNetStudy.setLocation(450,height);
        
        _jButtonNetStudy.setEnabled(false);
        
        _jButtonNewNet.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                //_netfacade.Start();
                DisplayCreate dc=new DisplayCreate();
                dc.setNetworkDescription(_netfacade.getNetworkDescription());
                dc.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                dc.setVisible(true);
                WindowListener wl=new WindowAdapter(){
                    @Override
                    public void windowClosed(WindowEvent we){
                        System.out.println("Форма закрылась");
                        _netfacade._created=true;
                        _netfacade.getNeuralNetwork().CreateNetwork(
                            _netfacade.getNetworkDescription().getParams(),
                            _netfacade.getRandDelegate()
                        );
                        displayNetwork();
                    }
                };
                dc.addWindowListener(wl);
            }
        });
        
        _jButtonNetDown.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("Загружаю");
                _netfacade.NetDownload();
                _netfacade._download=true;
                _netfacade.getNeuralNetwork().CreateNetwork(
                    _netfacade.getNetworkDescription().getParams(),
                    _netfacade.getRandDelegate()
                );
                displayNetwork();
            }
        });
        
        _jButtonNetSave.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                System.out.println("Сохраняю");
                _netfacade.SaveNetwork();
            }
        });
        
        _jButtonNetStart.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                System.out.println("Расчет");
                boolean ok=checkTextFields();
                if(ok==true){
                    ArrayList<Double> values=new ArrayList();
                    for(int i=0;i<_inputtext.size();i++){
                        String s=_inputtext.get(i).getText();
                        values.add(Double.valueOf(s));
                    }
                    _netfacade.performCalculation(values);
                    displayNetwork();
                }
                else{
                    System.out.println("Отказ, поля пустые");
                }
            }
        });
        
        _jButtonNetStudy.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                StudyDisplay d=new StudyDisplay();
                d.setNetFacade(_netfacade);
                d.setVisible(true);
            }           
        });
        
        add(_jButtonNewNet);
        add(_jButtonNetDown);
        add(_jButtonNetSave);
        add(_jButtonNetStart);
        add(_jButtonNetStudy);
        add(_scrollpane);
        
        revalidate();
    }
    /*
    private NetworkDescription prepareNetDescription(){
        NetworkDescription nd;
    }*/
    
    private void displayNetwork(){
        if(this._netfacade.getNetworkDescription().getOK()==false && this._netfacade._download==false){
            System.out.println("Отказ отрисовки");
            return;
        }
        else{
            ArrayList<String> val=new ArrayList();
            if(_netfacade._performed==true){
                for(int i=0;i<this._inputtext.size();i++){
                    val.add(_inputtext.get(i).getText());
                }
            }
            this.jLabelNetName.setText(_netfacade.getNetworkDescription().getName());
            this.jLabelNetDesc.setText(_netfacade.getNetworkDescription().getDescription());
            
            FlowLayout fl=new FlowLayout();
            _innerpanel=new JPanel();
            _innerpanel.setLayout(fl);
            
            int height=10;
            
            int size=_netfacade.getNetworkDescription().getInputs().size();
            
            _inputname=new ArrayList();
            _inputunit=new ArrayList();
            _inputtext=new ArrayList();
            
            for(int i=0;i<size;i++){
                String s;
                _inputname.add(new JLabel());
                JElementConventer.ConvertToMyLabel(_inputname.get(i), false);
                s=_netfacade.getNetworkDescription().getInputs().get(i).getDesc();
                
                _inputname.get(i).setText(s);
                
                _innerpanel.add(_inputname.get(i));
                
                _inputtext.add(new JFormattedTextField());
                
                if(this._netfacade._performed==true)
                    _inputtext.get(i).setText(val.get(i));
                
                _inputtext.get(i).addKeyListener(new java.awt.event.KeyAdapter() {
                    @Override
                    public void keyTyped(java.awt.event.KeyEvent e) {
                        char a = e.getKeyChar();
                        if (!Character.isDigit(a) && (a != '.') && (a != '\b')){
                            e.consume();
                        }
                    }
                });
                
                JElementConventer.ConvertToMyFTextField(_inputtext.get(i));
                //_inputtext.get(i).setLocation(120, height);
                _innerpanel.add(_inputtext.get(i));
                
                _inputunit.add(new JLabel());
                JElementConventer.ConvertToMyLabel(_inputunit.get(i), false);
                s=_netfacade.getNetworkDescription().getInputs().get(i).getUnit();
                _inputunit.get(i).setText(s);
                //_inputunit.get(i).setLocation(240, height);
                _innerpanel.add(_inputunit.get(i));
                
                height+=40;
            }
            
            if(_netfacade._performed==true){
                JEmptyPanel empty=new JEmptyPanel(500,60);
                _innerpanel.add(empty);
                ArrayList<Double> res=_netfacade.getResults();
                for(int i=0;i<res.size();i++){
                    String s=_netfacade.getNetworkDescription().getOutputs().get(i).getAnsver();
                    _innerpanel.add(new JResultLabel(s));
                    _innerpanel.add(new JResultLabel(String.valueOf(res.get(i))));
                }
            }
            _innerpanel.setPreferredSize(new Dimension(600,height));
            _innerpanel.revalidate();
            this._scrollpane.add(_innerpanel);
            this._scrollpane.getViewport().add(_innerpanel);
            this._scrollpane.revalidate();
            
            if(_netfacade._performed==true)
                _jButtonNetStudy.setEnabled(true);
            else
                _jButtonNetStudy.setEnabled(false);
        }
    }
    
    private boolean checkTextFields(){
        for(int i=0;i<this._inputtext.size();i++){
            String s=_inputtext.get(i).getText();
            if(s.trim().length()==0)
                return false;
        }
        return true;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Display().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelDD;
    private javax.swing.JLabel jLabelDN;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelNetDesc;
    private javax.swing.JLabel jLabelNetName;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables
}
